import torch
import torchvision.transforms as T
import torchvision.models.segmentation as segmentation
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load your uploaded image
img_path = "/content/pug (1).jpg"
img = cv2.imread(img_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Preprocessing (same as DeepLabV3 expects)
transform = T.Compose([
    T.ToPILImage(),
    T.Resize(520),
    T.ToTensor(),
    T.Normalize(mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
])
input_tensor = transform(img).unsqueeze(0)  # batch dimension

# Load pretrained DeepLabV3 model
# Use weights instead of deprecated pretrained
model = segmentation.deeplabv3_resnet101(weights=segmentation.DeepLabV3_ResNet101_Weights.COCO_WITH_VOC_LABELS_V1).eval()

# Predict
with torch.no_grad():
    output = model(input_tensor)['out'][0]
pred_mask = output.argmax(0).byte().cpu().numpy()

# PASCAL VOC color map for 21 classes
VOC_COLORMAP = np.array([
    (0, 0, 0),        # background
    (128, 0, 0),      # aeroplane
    (0, 128, 0),      # bicycle
    (128, 128, 0),    # bird
    (0, 0, 128),      # boat
    (128, 0, 128),    # bottle
    (0, 128, 128),    # bus
    (128, 128, 128),  # car
    (64, 0, 0),       # cat
    (192, 0, 0),      # chair
    (64, 128, 0),     # cow
    (192, 128, 0),    # diningtable
    (64, 0, 128),     # dog
    (192, 0, 128),    # horse
    (64, 128, 128),   # motorbike
    (192, 128, 128),  # person
    (0, 64, 0),       # potted plant
    (128, 64, 0),     # sheep
    (0, 192, 0),      # sofa
    (128, 192, 0),    # train
    (0, 64, 128),     # tv/monitor
])

# Colorize predicted mask
color_mask = VOC_COLORMAP[pred_mask]

# Resize mask to original image size
color_mask = cv2.resize(color_mask, (img.shape[1], img.shape[0]), interpolation=cv2.INTER_NEAREST)

# Convert color_mask to the same data type as img
color_mask = color_mask.astype(img.dtype)

# Overlay mask on original image with some transparency
alpha = 0.6
overlayed = cv2.addWeighted(img, 1 - alpha, color_mask, alpha, 0)

# Show original and overlay
plt.figure(figsize=(14,7))
plt.subplot(1,2,1)
plt.imshow(img)
plt.title("Original Image")
plt.axis('off')

plt.subplot(1,2,2)
plt.imshow(overlayed)
plt.title("Segmentation Overlay")
plt.axis('off')
plt.show()
