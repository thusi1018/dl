

import torch
import torch.nn as nn
from torchvision.models.segmentation import deeplabv3_resnet50
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
import torchvision.transforms as T

class LSTMSegmenter(nn.Module):
    """Simple LSTM wrapper for segmentation"""
    def __init__(self):
        super().__init__()
        # Use pretrained backbone
        self.backbone = deeplabv3_resnet50(pretrained=True)
        # Add LSTM layer
        self.lstm = nn.LSTM(21, 21, batch_first=True)
        
    def forward(self, x):
        out = self.backbone(x)['out']
        b, c, h, w = out.shape
        # Process through LSTM
        out_flat = out.permute(0, 2, 3, 1).reshape(b, h*w, c)
        lstm_out, _ = self.lstm(out_flat)
        out = lstm_out.reshape(b, h, w, c).permute(0, 3, 1, 2)
        return out

def segment_lstm(image_path):
    """Segment image with LSTM - just provide path!"""
    
    # Load model
    print("Loading LSTM model...")
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    model = LSTMSegmenter().to(device).eval()
    
    # Load image
    print(f"Processing: {image_path}")
    img = Image.open(image_path).convert('RGB')
    
    # Preprocess
    transform = T.Compose([
        T.ToTensor(),
        T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])
    input_tensor = transform(img).unsqueeze(0).to(device)
    
    # Segment
    with torch.no_grad():
        output = model(input_tensor)
    mask = output[0].argmax(0).cpu().numpy()
    
    # Colorize
    colors = plt.cm.tab20(np.linspace(0, 1, 21))
    colored = np.zeros((*mask.shape, 3))
    for i in range(21):
        colored[mask == i] = colors[i][:3]
    
    colored_img = Image.fromarray((colored * 255).astype(np.uint8))
    colored_img = colored_img.resize(img.size, Image.NEAREST)
    
    overlay = 0.6 * np.array(img) / 255 + 0.4 * np.array(colored_img) / 255
    
    # Show results
    fig, axes = plt.subplots(1, 3, figsize=(15, 5))
    axes[0].imshow(img)
    axes[0].set_title('Original')
    axes[0].axis('off')
    
    axes[1].imshow(colored_img)
    axes[1].set_title('LSTM Segmentation')
    axes[1].axis('off')
    
    axes[2].imshow(overlay)
    axes[2].set_title('Overlay')
    axes[2].axis('off')
    
    plt.tight_layout()
    plt.show()
    print(" Done!")

# ==================== USE IT ====================
segment_lstm("/pug.jpg")
